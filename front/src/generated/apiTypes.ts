/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/oauth/token": {
    post: {
      parameters: {
        formData: {
          /** OAuth grant type */
          grant_type: "password" | "refresh_token";
          /** Username (email) */
          username?: string;
          /** User password */
          password?: string;
          /** Refresh token */
          refresh_token?: string;
          /** Client id */
          client_id: string;
          /** Client secret */
          client_secret?: string;
          /** Space separated scopes */
          scope?: string;
        };
      };
      responses: {
        /** Returned when token was created */
        200: {
          schema: definitions["Token"];
        };
        /** Returned when bad credentials */
        400: unknown;
      };
    };
  };
  "/api/users/{userId}": {
    get: {
      parameters: {
        path: {
          /** User ID */
          userId: number;
        };
      };
      responses: {
        /** Returned when user was found */
        200: {
          schema: definitions["User"];
        };
        /** Returned when user is not authorized to get an user */
        403: unknown;
        /** Returned when user was not found */
        404: unknown;
      };
    };
  };
  "/api/users/current": {
    get: {
      responses: {
        /** Returned when user was found */
        200: {
          schema: definitions["CurrentUser"];
        };
        /** Returned when user is not authorized to get an user */
        403: unknown;
        /** Returned when user was not found */
        404: unknown;
      };
    };
  };
  "/api/colllections": {
    get: {
      responses: {
        /** Returned when Colllections are listed */
        200: {
          schema: definitions["ColllectionList"];
        };
      };
    };
    post: {
      parameters: {
        formData: {
          /** Name of the colllection */
          name?: string;
        };
      };
      responses: {
        /** Returned when Colllection was created */
        201: {
          schema: definitions["Colllection"];
        };
        /** Returned when form is invalid */
        400: unknown;
      };
    };
  };
  "/api/colllections/{encodedColllectionPath}": {
    get: {
      parameters: {
        path: {
          /** Encoded colllection path */
          encodedColllectionPath: string;
        };
      };
      responses: {
        /** Returned when Colllection is found */
        200: {
          schema: definitions["Colllection"];
        };
        /** Returned when Colllection file is not found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        formData: {
          /** Name of the colllection */
          name?: string;
        };
        path: {
          encodedColllectionPath: string;
        };
      };
      responses: {
        /** Returned when Colllection was updated */
        200: {
          schema: definitions["Colllection"];
        };
        /** Returned when form is invalid */
        400: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Encoded colllection path */
          encodedColllectionPath: string;
        };
      };
      responses: {
        /** Returned when Colllection file is deleted */
        204: never;
      };
    };
  };
  "/api/colllections/{encodedColllectionPath}/elements": {
    get: {
      parameters: {
        path: {
          /** Encoded colllection path */
          encodedColllectionPath: string;
        };
      };
      responses: {
        /** Returned when colllection files are listed */
        200: {
          schema: definitions["ElementList"];
        };
      };
    };
    /**
     * To create an element you need to match one of these combination:
     *  - `file`: `type` parameter is ignored as type is detected with file data
     *  - `url` (+ `type`)
     *  - `content` + `type`
     *
     * In any case you can define the name of the element with `basename`
     */
    post: {
      parameters: {
        path: {
          /** Encoded colllection path */
          encodedColllectionPath: string;
        };
        formData: {
          /** Element file to import */
          file?: unknown;
          /** Element URL to import from */
          url?: string;
          /** Element type */
          type?: string;
          /** Element name */
          name?: string;
          /** Element tag list */
          tags?: string[];
          /** Element content */
          content?: string;
        };
      };
      responses: {
        /** Returned when element was created in Colllection */
        201: {
          schema: definitions["Element"];
        };
        /** Returned when form is invalid */
        400: unknown;
      };
    };
  };
  "/api/colllections/{encodedColllectionPath}/elements/{encodedElementBasename}": {
    get: {
      parameters: {
        path: {
          /** Encoded colllection path */
          encodedColllectionPath: string;
          /** Encoded element basename */
          encodedElementBasename: string;
        };
      };
      responses: {
        /** Returned when Colllection file is found */
        200: {
          schema: definitions["Element"];
        };
        /** Returned when Colllection file is not found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Encoded colllection path */
          encodedColllectionPath: string;
          /** Encoded element basename */
          encodedElementBasename: string;
        };
        formData: {
          /** Element name */
          name?: string;
          /** Element tag list */
          tags?: string[];
        };
      };
      responses: {
        /** Returned when Colllection file is updated */
        200: {
          schema: definitions["Element"];
        };
        /** Returned when form is invalid */
        400: unknown;
        /** Returned when Colllection file is not found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Encoded colllection path */
          encodedColllectionPath: string;
          /** Encoded element basename */
          encodedElementBasename: string;
        };
      };
      responses: {
        /** Returned when Colllection file is deleted */
        204: never;
        /** Returned when Colllection file is not found */
        404: unknown;
      };
    };
  };
  "/api/colllections/{encodedColllectionPath}/tags": {
    get: {
      parameters: {
        path: {
          /** Encoded colllection path */
          encodedColllectionPath: string;
        };
      };
      responses: {
        /** Returned when colllection tags are listed */
        200: {
          schema: definitions["TagList"];
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** Encoded colllection path */
          encodedColllectionPath: string;
        };
        formData: {
          /** Name of the colllection tag */
          name?: string;
        };
      };
      responses: {
        /** Returned when Colllection tag was created */
        201: {
          schema: definitions["Tag"];
        };
        /** Returned when form is invalid */
        400: unknown;
      };
    };
  };
  "/api/colllections/{encodedColllectionPath}/tags/{encodedTagName}": {
    get: {
      parameters: {
        path: {
          /** Encoded colllection path */
          encodedColllectionPath: string;
          /** Encoded colllection tag name */
          encodedTagName: string;
        };
      };
      responses: {
        /** Returned when Colllection tag is found */
        200: {
          schema: definitions["Tag"];
        };
        /** Returned when Colllection tag does not exists */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Encoded colllection path */
          encodedColllectionPath: string;
          /** Encoded colllection tag name */
          encodedTagName: string;
        };
        formData: {
          /** Name of the colllection tag */
          name?: string;
        };
      };
      responses: {
        /** Returned when Colllection tag was updated */
        200: {
          schema: definitions["Tag"];
        };
        /** Returned when form is invalid */
        400: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Encoded colllection path */
          encodedColllectionPath: string;
          /** Encoded colllection tag name */
          encodedTagName: string;
        };
      };
      responses: {
        /** Returned when Colllection file is deleted */
        204: never;
        /** Returned when Colllection file is not found */
        404: unknown;
      };
    };
  };
}

export interface definitions {
  CurrentUser: {
    id?: number;
    email: string;
    nickname: string;
    roles?: string[];
    createdAt?: string;
  };
  User: {
    id?: number;
    nickname: string;
    createdAt?: string;
  };
  Token: {
    token_type?: string;
    expires_in?: number;
    /** JWT */
    access_token?: string;
    refresh_token?: string;
  };
  Element: {
    name?: string;
    type?: "image" | "link" | "note" | "colors";
    tags?: string[];
    updated?: string;
    size?: number;
    extension?: string;
    encodedColllectionPath?: string;
    encodedElementBasename?: string;
    fileUrl?: string;
    content?: string;
  };
  ColllectionList: definitions["Colllection"][];
  ElementList: definitions["Element"][];
  TagList: definitions["Tag"][];
  Colllection: {
    name?: string;
    encodedColllectionPath?: string;
  };
  Tag: {
    name?: string;
    encodedName?: string;
  };
}

export interface operations {}

export interface external {}
