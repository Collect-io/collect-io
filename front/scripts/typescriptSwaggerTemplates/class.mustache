{{! Here, we are in the mustache template, it's fine to edit it. The comment is here for the generated code :) }}
/**
 * DO NOT EDIT THIS FILE
 * This file was generated via `yarn generate-api-client` command
 */

/* eslint @typescript-eslint/no-explicit-any: off */
/* eslint @typescript-eslint/ban-types: off */
/* eslint prefer-const: off */

import * as request from 'superagent'
import {
  SuperAgentStatic,
} from 'superagent'

type CallbackHandler = (err: any, res?: request.Response) => void
type RequestHandler = (req: request.Request) => void

{{#definitions}}
export type {{&name}} = {{#tsType}}{{> type}}{{/tsType}}
{{/definitions}}

export type Logger = {
  log: (line: string) => any
}

export interface ResponseWithBody<S extends number, T> extends  Omit<keyof Response, 'body'> {
  status: S
  body: T
}

/**
* {{&description}}
* @class {{&className}}
* @param {(string)} [domainOrOptions] - The project domain.
*/
export default class {{&className}} {
  private domain = '{{&domain}}'
  private errorHandlers: CallbackHandler[] = []
  private requestHandlers: RequestHandler[] = []

  constructor(domain?: string, private logger?: Logger) {
    if (domain) {
      this.domain = domain
    }
  }

  public getDomain(): string {
    return this.domain
  }

  public addErrorHandler(handler: CallbackHandler): void {
    this.errorHandlers.push(handler)
  }

  public addRequestHandler(handler: RequestHandler): void {
    this.requestHandlers.push(handler)
  }

  {{#methods}}
    {{> method}}

  {{/methods}}

  private request(
    method: string,
    url: string,
    body: any,
    headers: any,
    queryParameters: any,
    form: any,
    reject: CallbackHandler,
    resolve: CallbackHandler,
  ) {
    if (this.logger) {
      this.logger.log(`Call ${method} ${url}`)
    }

    let req = (request as SuperAgentStatic)(method, url).query(queryParameters)

    Object.keys(headers).forEach(key => {
      req.set(key, headers[key])
    })

    if (body) {
      req.send(body)
    }

    if (typeof(body) === 'object' && !(body.constructor.name === 'Buffer')) {
      req.set('Content-Type', 'application/json')
    }

    if (Object.keys(form).length > 0) {
      req.type('form')
      req.send(form)
    }

    this.requestHandlers.forEach(handler => handler(req))

    req.end((error, response) => {
      if (!response.ok) {
        reject(response)
        this.errorHandlers.forEach(handler => handler(response))
      } else if (error) {
        reject(error)
        this.errorHandlers.forEach(handler => handler(error))
      } else {
        resolve(response)
      }
    })
  }
}
